name: 'Nothing but Nix'
description: 'Removes all the cruft 🪓 from a GitHub Actions runner to make the most space possible for Nix ️❄️'
branding:
  icon: 'trash-2'
  color: 'red'
runs:
  using: composite
  steps:
    - name: The Checks
      id: environment-check
      shell: bash
      run: |
        if [ "$(lsb_release -is)" != "Ubuntu" ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action only works on Ubuntu runners"
        elif [ -z "$GITHUB_ACTIONS" ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action only works on GitHub Actions runner"
        elif [ -d /nix ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action must be run before Nix is installed"
          exit 1
        else
          echo "is_supported=true" >> $GITHUB_OUTPUT
        fi
        sudo df -h
    - name: The Setup
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        ARCH=$(uname -m)          
        if [[ "$ARCH" == "x86_64" ]]; then
          URL_ARCH="x86_64"
        elif [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]]; then
          URL_ARCH="aarch64"
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi
        
        OS=$(uname -s)
        if [[ "$OS" == "Linux" ]]; then
          URL_OS="unknown-linux-gnu"
        elif [[ "$OS" == "Darwin" ]]; then
          URL_OS="apple-darwin"
        else
          echo "Unsupported OS: $OS"
          exit 1
        fi
        
        DOWNLOAD_URL="https://github.com/SUPERCILEX/fuc/releases/download/3.0.1/${URL_ARCH}-${URL_OS}-rmz"
        curl -L -o rmz "$DOWNLOAD_URL"
        chmod +x rmz
        sudo mv rmz /usr/bin/rmz
        rmz --version
    - name: Cleanse apt
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        sudo apt-get -y autoremove
        sudo apt-get -y clean
    - name: Cleanse docker
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        for CRUFT in $(docker image ls --format '{{.ID}}'); do
          docker rmi --force "${CRUFT}" || true
        done
        docker system prune --all --force
    - name: Cleanse snap
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        sudo systemctl stop snapd.service || true
        sudo systemctl disable snapd.service || true
        sudo systemctl mask snapd.service || true
        sudo umount --recursive /snap/*/* || true
    - name: The Purge
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        sudo rmz -f \
          /snap \
          /var/snap \
          /var/lib/snapd \
          /usr/lib/snapd \
          "${HOME}/snap" \
          "${HOME}/.rustup" \
          "${HOME}/.cargo" \
          "${HOME}/.dotnet" \
          /usr/local \
          /opt/hostedtoolcache \
          /opt/microsoft \
          /opt/az \
          /opt/pipx* \
          /opt/google \
          /opt/mssql-tools \
          /usr/bin/chrome* \
          /usr/bin/firefox* \
          /usr/bin/java* \
          /usr/bin/mono* \
          /usr/bin/mysql* \
          /usr/lib/dotnet* \
          /usr/lib/firefox* \
          /usr/lib/google-cloud-sdk \
          /usr/lib/heroku* \
          /usr/lib/jvm \
          /usr/lib/mecab \
          /usr/lib/*mono* \
          /usr/lib/R \
          /usr/lib/ruby \
          /usr/lib/php \
          /usr/bin/php* \
          /usr/sbin/php* \
          /usr/share/apache-maven* \
          /usr/share/az* \
          /usr/share/doc/* \
          /usr/share/dotnet* \
          /usr/share/fonts/* \
          /usr/share/google-cloud-sdk \
          /usr/share/gradle* \
          /usr/share/icons/* \
          /usr/share/java \
          /usr/share/kotlin* \
          /usr/share/man/* \
          /usr/share/mecab \
          /usr/share/miniconda \
          /usr/share/mysql* \
          /usr/share/php* \
          /usr/share/postgresql* \
          /usr/share/R \
          /usr/share/ri \
          /usr/share/sbt \
          /usr/share/swift* \
          /usr/share/texinfo \
          /var/lib/gems \
          /var/lib/mecab \
          /var/lib/mysql* \
          /var/lib/php* \
          /var/lib/postgresql*
        sudo mkdir -p /usr/local/{bin,doc,include,lib,man,sbin,share,src}
    - name: The Disks
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        loops=()
        # Create loop devices
        for ROOT in / /mnt/; do
          free_space=$(df -m --output=avail "${ROOT}" | tail -n 1 | tr -d ' ')
          echo "Free space of "${ROOT}": ${free_space}MB"
          if sudo fallocate -l $((free_space - 1024))M "${ROOT}"disk.img; then
            loop_dev=$(sudo losetup --find)
            sudo losetup ${loop_dev} "${ROOT}"disk.img
            loops+=(${loop_dev})
          fi
        done
          
        # Create filesystem
        sudo mkfs.btrfs -L nix -d raid0 -m raid0 "${loops[@]}"
        sudo btrfs device scan
        sudo btrfs filesystem show
        sudo file "${loops[@]}"

        # Mount filesystem
        sudo mkdir -p /nix
        sudo mount LABEL=nix /nix -o noatime,nobarrier,compress=zstd:1,space_cache=v2,ssd,commit=120,discard=async
        sudo df -h
        