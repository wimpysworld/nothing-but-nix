name: 'Nothing but Nix'
description: 'Removes all the cruft 🪓 from a GitHub Actions runner to make the most space possible for Nix ️❄️'
branding:
  icon: 'trash-2'
  color: 'red'
inputs:
  hatchet-protocol:
    description: 'Level of file purging (Holster: none, Cleave: standard, Rampage: aggressive)'
    required: false
    default: 'cleave'
runs:
  using: composite
  steps:
    - name: The Checks
      id: environment-check
      shell: bash
      run: |
        if [ "$(lsb_release -is)" != "Ubuntu" ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action only works on Ubuntu runners"
        elif [ -z "$GITHUB_ACTIONS" ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action only works on GitHub Actions runner"
        elif [ -d /nix ]; then
          echo "is_supported=false" >> $GITHUB_OUTPUT
          echo "This action must be run before Nix is installed"
          exit 1
        else
          echo "is_supported=true" >> $GITHUB_OUTPUT
        fi
    - name: The Hatchet Protocol
      id: set-hatchet-protocol
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        input_protocol="${{ inputs.hatchet-protocol }}"
        # Convert to lowercase for case-insensitive comparison
        input_protocol="${input_protocol,,}"
        
        # Default to Cleave (1)
        protocol_level=1
        
        if [[ "$input_protocol" == "holster" ]]; then
          protocol_level=0
          echo "🪓 Hatchet Protocol: Holster - Keeping the hatchet sheathed, just combining space (Level 0)"
        elif [[ "$input_protocol" == "rampage" ]]; then
          protocol_level=2
          echo "🪓 Hatchet Protocol: Rampage - Relentless, brutal elimination of all bloat (Level 2)"
        else
          echo "🪓 Hatchet Protocol: Cleave - Making powerful, decisive cuts to bloated packages (Level 1)"
        fi
        
        echo "level=${protocol_level}" >> $GITHUB_OUTPUT
    - name: The Setup
      if: steps.environment-check.outputs.is_supported == 'true' && steps.set-hatchet-protocol.outputs.level > 0
      shell: bash
      run: |
        ARCH=$(uname -m)          
        if [[ "$ARCH" == "x86_64" ]]; then
          URL_ARCH="x86_64"
        elif [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]]; then
          URL_ARCH="aarch64"
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi
        
        OS=$(uname -s)
        if [[ "$OS" == "Linux" ]]; then
          URL_OS="unknown-linux-gnu"
        elif [[ "$OS" == "Darwin" ]]; then
          URL_OS="apple-darwin"
        else
          echo "Unsupported OS: $OS"
          exit 1
        fi
        
        DOWNLOAD_URL="https://github.com/SUPERCILEX/fuc/releases/download/3.0.1/${URL_ARCH}-${URL_OS}-rmz"
        curl -L -o rmz "$DOWNLOAD_URL"
        chmod +x rmz
        sudo mv rmz /usr/bin/rmz
        rmz --version
    - name: Cleanse apt
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        sudo tee /etc/dpkg/dpkg.cfg.d/01_nocruft > /dev/null << 'EOF'
        path-exclude /usr/share/doc/*
        path-exclude /usr/share/fonts/*
        path-exclude /usr/share/icons/*
        path-exclude /usr/share/info/*
        path-exclude /usr/share/man/*
        EOF

        protocol_level="${{ steps.set-hatchet-protocol.outputs.level }}"
        if [[ "$protocol_level" -ge 2 ]]; then
          sudo apt-get -y remove --purge \
            azure-cli \
            firefox \
            google-chrome-stable \
            google-cloud-sdk \
            microsoft-edge-stable \
            powershell
          sudo apt-get -y autoremove --purge
        fi

        if [[ "$protocol_level" -ge 1 ]]; then
          sudo apt-get -y clean
        fi
    - name: Cleanse docker
      if: steps.environment-check.outputs.is_supported == 'true' && steps.set-hatchet-protocol.outputs.level >= 1
      shell: bash
      run: |
        for CRUFT in $(docker image ls --format '{{.ID}}'); do
          docker rmi --force "${CRUFT}" || true
        done
        docker system prune --all --force
    - name: Cleanse snap
      if: steps.environment-check.outputs.is_supported == 'true' && steps.set-hatchet-protocol.outputs.level >= 2
      shell: bash
      run: |
        sudo systemctl stop snapd.service || true
        sudo systemctl disable snapd.service || true
        sudo systemctl mask snapd.service || true
        sudo umount --recursive /snap/*/* || true
        sudo rmz -f \
          /snap \
          /usr/bin/snap* \
          /usr/lib/snapd \
          /var/snap \
          /var/lib/snapd \
          "${HOME}/snap"
    - name: The Purge
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        protocol_level="${{ steps.set-hatchet-protocol.outputs.level }}"
        if [[ "$protocol_level" -ge 1 ]]; then
          sudo rmz -f \
            "${HOME}/.rustup" \
            "${HOME}/.cargo" \
            "${HOME}/.dotnet" \
            /usr/local \
            /opt/hostedtoolcache \
            /opt/microsoft \
            /opt/az \
            /opt/pipx* \
            /opt/google \
            /opt/mssql-tools
          sudo mkdir -p /usr/local/{bin,doc,include,lib,man,sbin,share,src}
        fi

        if [[ "$protocol_level" -ge 2 ]]; then
          sudo rmz -f \
            /usr/bin/buildah \
            /usr/bin/docker* \
            /usr/bin/java* \
            /usr/bin/kotlin* \
            /usr/bin/kubectl \
            /usr/bin/mono* \
            /usr/bin/my* \
            /usr/bin/pedump \
            /usr/bin/perror \
            /usr/bin/php* \
            /usr/bin/podman* \
            /usr/bin/ruby* \
            /usr/bin/tcpdump \
            /usr/bin/skopeo \
            /usr/bin/vim* \
            /usr/bin/x86_64-* \
            /usr/lib/*-linux-gnu/libLLVM* \
            /usr/lib/*-linux-gnu/libclang* \
            /usr/lib/*-linux-gnu/liblldb* \
            /usr/lib/*-linux-gnu/libmysql* \
            /usr/lib/cgi-bin \
            /usr/lib/dotnet \
            /usr/lib/firefox \
            /usr/lib/gcc \
            /usr/lib/google-cloud-sdk \
            /usr/lib/heroku* \
            /usr/lib/jvm \
            /usr/lib/llvm* \
            /usr/lib/mecab \
            /usr/lib/*mono* \
            /usr/lib/mysql \
            /usr/lib/php \
            /usr/lib/postgresql \
            /usr/lib/R \
            /usr/lib/ruby \
            /usr/sbin/mysql* \
            /usr/sbin/php* \
            /usr/sbin/nginx* \
            /usr/share/apache* \
            /usr/share/az* \
            /usr/share/doc/* \
            /usr/share/dotnet \
            /usr/share/fonts/* \
            /usr/share/fwupd \
            /usr/share/google-cloud-sdk \
            /usr/share/gradle* \
            /usr/share/icons/* \
            /usr/share/info/* \
            /usr/share/java \
            /usr/share/kotlin* \
            /usr/share/man/* \
            /usr/share/mecab \
            /usr/share/miniconda \
            /usr/share/mysql \
            /usr/share/postgresql \
            /usr/share/php* \
            /usr/share/python-babel-localedata \
            /usr/share/python-wheels \
            /usr/share/R \
            /usr/share/ri \
            /usr/share/sbt \
            /usr/share/swift \
            /usr/share/swig* \
            /usr/share/tcltk \
            /usr/share/texinfo \
            /usr/share/vim \
            /var/lib/gems \
            /var/lib/mecab \
            /var/lib/mysql \
            /var/lib/podman \
            /var/lib/postgresql \
            /var/lib/ubuntu-advantage
        fi
    - name: The Disks
      if: steps.environment-check.outputs.is_supported == 'true'
      shell: bash
      run: |
        # Create loop devices
        loops=()
        for ROOT in / /mnt/; do
          free_space=$(df -m --output=avail "${ROOT}" | tail -n 1 | tr -d ' ')
          echo "Free space of "${ROOT}": ${free_space}MB"
          if sudo fallocate -l $((free_space - 1024))M "${ROOT}"disk.img; then
            loop_dev=$(sudo losetup --find)
            sudo losetup ${loop_dev} "${ROOT}"disk.img
            loops+=(${loop_dev})
          fi
        done
          
        # Create filesystem
        sudo mkfs.btrfs -L nix -d raid0 -m raid0 "${loops[@]}"
        sudo btrfs device scan
        sudo btrfs filesystem show

        # Mount filesystem
        sudo mkdir -p /nix
        sudo mount LABEL=nix /nix -o noatime,nobarrier,compress=zstd:1,space_cache=v2,ssd,commit=120,discard=async
        sudo df -h
        